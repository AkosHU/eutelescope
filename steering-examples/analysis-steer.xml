<!--
============================================================================================================================
   Steering File generated by Marlin GUI on Mon May 28 16:08:00 2007

   WARNING: - Please be aware that comments made in the original steering file were lost.
            - Processors that are not installed in your Marlin binary lost their parameter's descriptions and types as well.
            - Extra parameters that aren't categorized as default in a processor lost their description and type.
============================================================================================================================
-->


<marlin>

   <global>
      <parameter name="LCIOInputFiles"> simuldata-run.slcio </parameter>
      <parameter name="GearXMLFile" value="gear-telescope.xml"/>
      <parameter name="MaxRecordNumber" value="5"/>
      <parameter name="SkipNEvents" value="0"/>
      <parameter name="SupressCheck" value="false"/>
      <parameter name="Verbosity" value="MESSAGE"/>
   </global>

   <execute>
      <processor name="AIDAHistogramInterface"/>
      <processor name="LoadPedestal"/>
      <processor name="LocalCopyPedestalCollection"/>
      <processor name="ApplyPedestalCorrection"/>
      <processor name="ClusterSearch"/>
      <processor name="SeparateCluster"/>
      <processor name="ApplyGeometry"/>
      <processor name="SaveOutputFile"/>
   </execute>

 <processor name="AIDAHistogramInterface" type="AIDAProcessor">
 <!--Processor that handles AIDA files. Creates on directory per processor.  Processors only need to create and fill the histograms, clouds and tuples. Needs to be the first ActiveProcessor-->
  <!-- compression of output file 0: false >0: true (default) -->
  <parameter name="Compress" type="int" value="1"/>
  <!-- filename without extension-->
  <parameter name="FileName" type="string" value="analysis-histo"/>
  <!-- type of output file xml (default) or root ( only OpenScientist)-->
  <parameter name="FileType" type="string" value="root"/>
</processor>

 <processor name="LoadPedestal" type="ConditionsProcessor">
 <!--ConditionsProcessor provides access to conditions data  transparently from LCIO files or a databases, using LCCD-->
  <!--Initialization of a conditions database handler-->
  <!--parameter name="DBCondHandler" type="StringVec"> conditionsName /lccd/myfolder HEAD </parameter-->
  <!--Initialization of a conditions db file handler-->
  <!--parameter name="DBFileHandler" type="StringVec"> conditionsName conditions.slcio collectionName </parameter-->
  <!--Initialization string for conditions database-->
  <parameter name="DBInit" type="string" value="localhost:lccd_test:calvin:hobbes"/>
  <!--Initialization of a data file handler-->
  <!--parameter name="DataFileHandler" type="StringVec" value="conditionsName"/-->
  <!--Initialization of a simple conditions file handler-->
  <parameter name="SimpleFileHandler" type="StringVec"> pedestalDB pedestal-db.slcio pedestalDB </parameter>
  <parameter name="SimpleFileHandler" type="StringVec"> noiseDB pedestal-db.slcio noiseDB </parameter>
  <parameter name="SimpleFileHandler" type="StringVec"> statusDB pedestal-db.slcio statusDB </parameter>
</processor>

 <processor name="LocalCopyPedestalCollection" type="EUTelCopyPedestalProcessor">
 <!--EUTelCopyPedestalProcessor copies the condition data into local writable collections-->
  <!--Noise input condition-->
  <parameter name="NoiseConditionName" type="string" lcioInType="TrackerData"> noiseDB </parameter>
  <!--Pedestal input condition-->
  <parameter name="PedestalConditionName" type="string" lcioInType="TrackerData"> pedestalDB </parameter>
  <!--Status input condition-->
  <parameter name="StatusConditionName" type="string" lcioInType="TrackerRawData"> statusDB </parameter>
  <!--Noise local collection-->
  <parameter name="NoiseCollectionName" type="string" lcioOutType="TrackerData"> noise </parameter>
  <!--Pedestal local collection-->
  <parameter name="PedestalCollectionName" type="string" lcioOutType="TrackerData"> pedestal </parameter>
  <!--Pixel status collection-->
  <parameter name="StatusCollectionName" type="string" lcioOutType="TrackerRawData"> status </parameter>
</processor>

 <processor name="ApplyPedestalCorrection" type="EUTelCalibrateEventProcessor">
 <!--EUTelCalibrateEventProcessor subtract the pedestal value from the input data-->
  <!--Noise from the condition file-->
  <parameter name="NoiseCollectionName" type="string" lcioInType="TrackerData"> noise </parameter>
  <!--Pedestal from the condition file-->
  <parameter name="PedestalCollectionName" type="string" lcioInType="TrackerData"> pedestal </parameter>
  <!--Input raw data collection-->
  <parameter name="RawDataCollectionName" type="string" lcioInType="TrackerRawData"> rawdata </parameter>
  <!--Pixel status from the condition file-->
  <parameter name="StatusCollectionName" type="string" lcioInType="TrackerRawData"> status </parameter>
  <!--Name of the output calibrated data collection-->
  <parameter name="CalibratedDataCollectionName" type="string" lcioOutType="TrackerData"> data </parameter>
  <!--Flag to switch on (1) or off (0) the detector debug histogram filling-->
  <parameter name="DebugHistoFilling" type="int" value="0"/>
  <!--Threshold of pixel SNR for hit rejection-->
  <parameter name="HitRejectionCut" type="float" value="3.5"/>
  <!--Maximum allowed number of rejected pixel per event-->
  <parameter name="MaxNoOfRejectedPixels" type="int" value="3000"/>
  <!--Flag to switch on (1) or off (0) the common mode suppression algorithm-->
  <parameter name="PerformCommonMode" type="int" value="1"/>
</processor>

 <processor name="ClusterSearch" type="EUTelClusteringProcessor">
 <!--EUTelClusteringProcessor subtract the pedestal value from the input data-->
  <!--Input calibrated data collection name-->
  <parameter name="DataCollectionName" type="string" lcioInType="TrackerData"> data </parameter>
  <!--Noise (input) collection name-->
  <parameter name="NoiseCollectionName" type="string" lcioInType="TrackerData"> noise </parameter>
  <!--Pixel status (input) collection name-->
  <parameter name="StatusCollectionName" type="string" lcioInType="TrackerRawData"> status </parameter>
  <!--Cluster (output) collection name-->
  <parameter name="PulseCollectionName" type="string" lcioOutType="TrackerPulse"> cluster </parameter>
  <!-- Sorry, this parameter isn't a default parameter for this processor: description and type lost!!  -->
  <parameter name="ClusterCollectionName" value="cluster"/>
  <!--Threshold in SNR for cluster identification-->
  <parameter name="ClusterCut" type="float" value="3"/>
  <!--Maximum allowed cluster size along x (only odd numbers)-->
  <parameter name="ClusterSizeX" type="int" value="5"/>
  <!--Maximum allowed cluster size along y (only odd numbers)-->
  <parameter name="ClusterSizeY" type="int" value="5"/>
  <!--Select here which algorithm should be used for clustering-->
  <parameter name="ClusteringAlgo" type="string" value="FixedFrame"/>
  <!-- Sorry, this parameter isn't a default parameter for this processor: description and type lost!!  -->
  <parameter name="DummyCollectionName" value="dummy"/>
  <!--Threshold in SNR for seed pixel identification-->
  <parameter name="SeedPixelCut" type="float" value="4.5"/>
</processor>

 <processor name="SeparateCluster" type="EUTelClusterSeparationProcessor">
 <!--EUTelClusterSeparationProcessor separates merging clusters-->
  <!--Cluster collection name -->
  <parameter name="ClusterCollectionName" type="string" lcioInType="TrackerPulse"> cluster </parameter>
  <!--Minimum distance allowed between separated clusters (0 == only touching clusters)-->
  <parameter name="MinimumDistance" type="float" value="0"/>
  <!--Select which algorithm to use for cluster separation-->
  <parameter name="SeparationAlgorithm" type="string" value="FlagOnly"/>
</processor>

 <processor name="ApplyGeometry" type="EUTelHitMaker">
 <!--EUTelHitMaker is responsible to translate cluster centers from the local frame of reference to the external frame of reference using the GEAR geometry description-->
  <!--Cluster (pulse) collection name-->
  <parameter name="PulseCollectionName" type="string" lcioInType="TrackerPulse"> cluster </parameter>
  <!--Hit collection name-->
  <parameter name="HitCollectionName" type="string" lcioOutType="TrackerHit"> hit </parameter>
  <!--The name of the collections containing the eta function (x and y respectively)-->
  <parameter name="EtaCollectionName" type="StringVec"> xEtaCondition yEtaCondition </parameter>
  <!--Enable (==1) or disable eta correction-->
  <parameter name="EtaSwitch" type="int" value="0"/>
</processor>

 <processor name="SaveOutputFile" type="EUTelOutputProcessor">
 <!--Writes the current event to the specified LCIO outputfile. Eventually it adds a EORE at the of the file if it was missing Needs to be the last ActiveProcessor.-->
  <!--drops the named collections from the event-->
  <parameter name="DropCollectionNames" type="StringVec"> rawdata data pedestal noise status </parameter>
  <!--drops all collections of the given type from the event-->
  <!--parameter name="DropCollectionTypes" type="StringVec"> TrackerRawData TrackerData </parameter-->
  <!-- name of output file -->
  <parameter name="LCIOOutputFile" type="string" value="analysis-output.slcio"/>
  <!--write mode for output file:  WRITE_APPEND or WRITE_NEW-->
  <parameter name="LCIOWriteMode" type="string" value="WRITE_NEW"/>
  <!--will split output file if size in kB exceeds given value - doesn't work with APPEND and NEW-->
  <!--parameter name="SplitFileSizekB" type="int" value="1992294"/-->
</processor>

</marlin>
