<?xml version="1.0" encoding="us-ascii"?>
<!-- ?xml-stylesheet type="text/xsl" href="http://ilcsoft.desy.de/marlin/marlin.xsl"? -->
<!-- ?xml-stylesheet type="text/xsl" href="marlin.xsl"? -->


<!--

==========================================================================================
Steering file template for the pysub framework

==> clusearch-tmp.xml <===

Author: Antonio Bulgheroni, INFN <mailto:antonio.bulgheroni@gmail.com>
Version: $Id: clusearch-tmp.xml,v 1.9 2009-08-01 10:41:44 bulgheroni Exp $
==========================================================================================

-->

<marlin xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://ilcsoft.desy.de/marlin/marlin.xsd">

  <execute>
    <processor name="AIDA"/>
      <@DUTCommentLeft@processor name="LoadPedestal_@DUTSuffix@"/@DUTCommentRight@>
      <@DUTCommentLeft@processor name="CopyPedestal_@DUTSuffix@"/@DUTCommentRight@>
      <@DUTCommentLeft@processor name="ApplyPedestal_@DUTSuffix@"/@DUTCommentRight@>
      <@TELCommentLeft@processor name="Mimosa26EUTelAutoPedestalNoiseProcessor"/@TELCommentRight@>
      <@TELCommentLeft@processor name="Clustering"/@TELCommentRight@>
      <@DUTCommentLeft@processor name="Clustering_@DUTSuffix@"/@DUTCommentRight@>
      <@TELCommentLeft@processor name="Correlator"/@TELCommentRight@>
      <@TELCommentLeft@processor name="HotPixelKiller"/@TELCommentRight@>
    <processor name="Save"/>
  </execute>

  <global>
    <parameter name="LCIOInputFiles"> @LcioRawPath@/run@RunNumber@.slcio </parameter>
    <parameter name="GearXMLFile" value="@GearPath@/@GearFile@"/>
    <parameter name="MaxRecordNumber" value="10000000000"/>
    <parameter name="SkipNEvents" value="0"/>
    <parameter name="SupressCheck" value="false"/>
    <parameter name="Verbosity" value="MESSAGE"/>
  </global>

  <processor name="AIDA" type="AIDAProcessor">
    <!--Processor that handles AIDA files. Creates on directory per processor.  Processors only need to create and fill the histograms, clouds and tuples. Needs to be the first ActiveProcessor-->
    <!-- compression of output file 0: false >0: true (default) -->
    <parameter name="Compress" type="int" value="1"/>
    <!-- filename without extension-->
    <parameter name="FileName" type="string" value= "@HistoPath@/run@RunNumber@-clu@FilenameHyphen@@FilenameSuffix@-histo"/>
    <!-- type of output file xml (default) or root ( only OpenScientist)-->
    <parameter name="FileType" type="string" value="root"/>
  </processor>

  <processor name="LoadPedestal" type="ConditionsProcessor">
    <!--ConditionsProcessor provides access to conditions data  transparently from LCIO files or a databases, using LCCD-->
    <!--Initialization of a conditions database handler-->
    <!--parameter name="DBCondHandler" type="StringVec"> conditionsName /lccd/myfolder HEAD </parameter-->
    <!--Initialization of a conditions db file handler-->
    <!--parameter name="DBFileHandler" type="StringVec"> conditionsName conditions.slcio collectionName </parameter-->
    <!--Initialization string for conditions database-->
    <parameter name="DBInit" type="string" value="localhost:lccd_test:calvin:hobbes"/>
    <!--Initialization of a data file handler-->
    <!--parameter name="DataFileHandler" type="StringVec" value="conditionsName"/-->
    <!--Initialization of a simple conditions file handler-->
    <parameter name="SimpleFileHandler" type="StringVec"> statusDB @DBPath@/run@PedeRunNumber@-ped-db.slcio statusDB </parameter>
    <parameter name="SimpleFileHandler" type="StringVec"> noiseDB @DBPath@/run@PedeRunNumber@-ped-db.slcio noiseDB </parameter>
    <parameter name="SimpleFileHandler" type="StringVec"> pedestalDB @DBPath@/run@PedeRunNumber@-ped-db.slcio pedestalDB </parameter>
  </processor>

  <processor name="LoadPedestal_@DUTSuffix@" type="ConditionsProcessor">
    <!--ConditionsProcessor provides access to conditions data  transparently from LCIO files or a databases, using LCCD-->
    <!--Initialization of a conditions database handler-->
    <!--parameter name="DBCondHandler" type="StringVec"> conditionsName /lccd/myfolder HEAD </parameter-->
    <!--Initialization of a conditions db file handler-->
    <!--parameter name="DBFileHandler" type="StringVec"> conditionsName conditions.slcio collectionName </parameter-->
    <!--Initialization string for conditions database-->
    <parameter name="DBInit" type="string" value="localhost:lccd_test:calvin:hobbes"/>
    <!--Initialization of a data file handler-->
    <!--parameter name="DataFileHandler" type="StringVec" value="conditionsName"/-->
    <!--Initialization of a simple conditions file handler-->
    <parameter name="SimpleFileHandler" type="StringVec"> statusDB_@DUTSuffix@ @DBPath@/run@PedeRunNumber@-ped-db.slcio statusDB_@DUTSuffix@ </parameter>
    <parameter name="SimpleFileHandler" type="StringVec"> noiseDB_@DUTSuffix@ @DBPath@/run@PedeRunNumber@-ped-db.slcio noiseDB_@DUTSuffix@ </parameter>
    <parameter name="SimpleFileHandler" type="StringVec"> pedestalDB_@DUTSuffix@ @DBPath@/run@PedeRunNumber@-ped-db.slcio pedestalDB_@DUTSuffix@ </parameter>
  </processor>


  <processor name="CopyPedestal" type="EUTelCopyPedestalProcessor">
    <!--EUTelCopyPedestalProcessor copies the condition data into local writable collections-->
    <!--Noise input condition-->
    <parameter name="NoiseConditionName" type="string" lcioInType="TrackerData"> noiseDB </parameter>
    <!--Pedestal input condition-->
    <parameter name="PedestalConditionName" type="string" lcioInType="TrackerData"> pedestalDB </parameter>
    <!--Status input condition-->
    <parameter name="StatusConditionName" type="string" lcioInType="TrackerRawData"> statusDB </parameter>
    <!--Noise local collection-->
    <parameter name="NoiseCollectionName" type="string" lcioOutType="TrackerData"> noise </parameter>
    <!--Pedestal local collection-->
    <parameter name="PedestalCollectionName" type="string" lcioOutType="TrackerData"> pedestal </parameter>
    <!--Pixel status collection-->
    <parameter name="StatusCollectionName" type="string" lcioOutType="TrackerRawData"> status </parameter>
  </processor>

  <processor name="CopyPedestal_@DUTSuffix@" type="EUTelCopyPedestalProcessor">
    <!--EUTelCopyPedestalProcessor copies the condition data into local writable collections-->
    <!--Noise input condition-->
    <parameter name="NoiseConditionName" type="string" lcioInType="TrackerData"> noiseDB_@DUTSuffix@ </parameter>
    <!--Pedestal input condition-->
    <parameter name="PedestalConditionName" type="string" lcioInType="TrackerData"> pedestalDB_@DUTSuffix@ </parameter>
    <!--Status input condition-->
    <parameter name="StatusConditionName" type="string" lcioInType="TrackerRawData"> statusDB_@DUTSuffix@ </parameter>
    <!--Noise local collection-->
    <parameter name="NoiseCollectionName" type="string" lcioOutType="TrackerData"> noise_@DUTSuffix@ </parameter>
    <!--Pedestal local collection-->
    <parameter name="PedestalCollectionName" type="string" lcioOutType="TrackerData"> pedestal_@DUTSuffix@ </parameter>
    <!--Pixel status collection-->
    <parameter name="StatusCollectionName" type="string" lcioOutType="TrackerRawData"> status_@DUTSuffix@ </parameter>
  </processor>

  <processor name="ApplyPedestal" type="EUTelCalibrateEventProcessor">
    <!--EUTelCalibrateEventProcessor subtracts the pedestal value from the input data-->

    <!--
        INPUT & OUTPUT
    -->

    <!--Noise from the condition file-->
    <parameter name="NoiseCollectionName" type="string" lcioInType="TrackerData"> noise </parameter>
    <!--Pedestal from the condition file-->
    <parameter name="PedestalCollectionName" type="string" lcioInType="TrackerData"> pedestal </parameter>
    <!--Input raw data collection-->
    <parameter name="RawDataCollectionName" type="string" lcioInType="TrackerRawData"> rawdata </parameter>
    <!--Pixel status from the condition file-->
    <parameter name="StatusCollectionName" type="string" lcioInType="TrackerRawData"> status </parameter>
    <!--Name of the output calibrated data collection-->
    <parameter name="CalibratedDataCollectionName" type="string" lcioOutType="TrackerData"> data </parameter>

    <!--
        GENERAL PARAMETERS
    -->
    <!--Threshold of pixel SNR for hit rejection-->
    <parameter name="HitRejectionCut" type="float" value="3.5"/>
    <!--Flag to switch on the common mode suppression algorithm. 0 -> off, 1 -> full frame,  2 -> row wise-->
    <parameter name="PerformCommonMode" type="int" value="1"/>

    <!--
        FULL FRAME PARAMETERS
    -->
    <!--Maximum allowed number of rejected pixel per event-->
    <parameter name="MaxNoOfRejectedPixels" type="int" value="15000"/>

    <!--
        ROW WISE PARAMETERS
    -->
    <!--Maximum allowed number of rejected pixels per row (only with RowWise)-->
    <parameter name="MaxNoOfRejectedPixelPerRow" type="int" value="25"/>
    <!--Maximum allowed number of skipped rows (only with RowWise)-->
    <parameter name="MaxNoOfSkippedRow" type="int" value="15"/>

    <!--
        HISTOGRAMS
    -->
    <!--Flag to switch on (1) or off (0) the detector debug histogram filling-->
    <parameter name="DebugHistoFilling" type="bool" value="false"/>
    <!--This is the name of the histogram information file-->
    <parameter name="HistoInfoFileName" type="string" value="@HistoInfoPath@/@HistoInfo@"/>

  </processor>


  <processor name="ApplyPedestal_@DUTSuffix@" type="EUTelCalibrateEventProcessor">
    <!--EUTelCalibrateEventProcessor subtracts the pedestal value from the input data-->

    <!--
        INPUT & OUTPUT
    -->

    <!--Noise from the condition file-->
    <parameter name="NoiseCollectionName" type="string" lcioInType="TrackerData"> noise_@DUTSuffix@ </parameter>
    <!--Pedestal from the condition file-->
    <parameter name="PedestalCollectionName" type="string" lcioInType="TrackerData"> pedestal_@DUTSuffix@ </parameter>
    <!--Input raw data collection-->
    <parameter name="RawDataCollectionName" type="string" lcioInType="TrackerRawData"> rawdata_@DUTSuffix@ </parameter>
    <!--Pixel status from the condition file-->
    <parameter name="StatusCollectionName" type="string" lcioInType="TrackerRawData"> status_@DUTSuffix@ </parameter>
    <!--Name of the output calibrated data collection-->
    <parameter name="CalibratedDataCollectionName" type="string" lcioOutType="TrackerData"> data_@DUTSuffix@ </parameter>

    <!--
        GENERAL PARAMETERS
    -->
    <!--Threshold of pixel SNR for hit rejection-->
    <parameter name="HitRejectionCut" type="float" value="3.5"/>
    <!--Flag to switch on the common mode suppression algorithm. 0 -> off, 1 -> full frame,  2 -> row wise-->
    <parameter name="PerformCommonMode" type="int" value="1"/>

    <!--
        FULL FRAME PARAMETERS
    -->
    <!--Maximum allowed number of rejected pixel per event-->
    <parameter name="MaxNoOfRejectedPixels" type="int" value="15000"/>

    <!--
        ROW WISE PARAMETERS
    -->
    <!--Maximum allowed number of rejected pixels per row (only with RowWise)-->
    <parameter name="MaxNoOfRejectedPixelPerRow" type="int" value="25"/>
    <!--Maximum allowed number of skipped rows (only with RowWise)-->
    <parameter name="MaxNoOfSkippedRow" type="int" value="15"/>

    <!--
        HISTOGRAMS
    -->
    <!--Flag to switch on (1) or off (0) the detector debug histogram filling-->
    <parameter name="DebugHistoFilling" type="bool" value="false"/>
    <!--This is the name of the histogram information file-->
    <parameter name="HistoInfoFileName" type="string" value="@HistoInfoPath@/@HistoInfo@"/>

  </processor>

  <processor name="UpdatePedestalNoise" type="EUTelUpdatePedestalNoiseProcessor">
    <!--EUTelUpdatePedestalNoiseProcessor periodically updates the pedestaland noise values-->
    <!--Noise local collection-->
    <parameter name="NoiseCollectionName" type="string" lcioInType="TrackerData"> noise </parameter>
    <!--Pedestal local collection-->
    <parameter name="PedestalCollectionName" type="string" lcioInType="TrackerData"> pedestal </parameter>
    <!--Raw data collection name-->
    <parameter name="RawDataCollectionName" type="string" lcioInType="TrackerRawData"> rawdata </parameter>
    <!--Pixel status collection-->
    <parameter name="StatusCollectionName" type="string" lcioInType="TrackerRawData"> status </parameter>
    <!--The value of the fixed weight (only for fixed weight algorithm-->
    <parameter name="FixedWeightValue" type="int" value="100"/>
    <!--A pixel to be monitored (detectorID, xCoord, yCoord). Add as many line as this as you wish-->
    <parameter name="PixelMonitored" type="IntVec" value="0 10 15 1 10 15 2 10 15 3 10 15 4 10 15  "/>
    <!--The algorithm to be used for pedestal update-->
    <parameter name="UpdateAlgorithm" type="string" value="FixedWeight"/>
    <!--How often the algorithm should be applied-->
    <parameter name="UpdateFrequency" type="int" value="10"/>
  </processor>

 <processor name="Mimosa26EUTelAutoPedestalNoiseProcessor" type="EUTelAutoPedestalNoiseProcessor">
 <!--EUTelAutoPedestalNoiseProcessor produces initial pedestal / noise / status with user provided values-->
  <!--Noise local collection-->
  <parameter name="NoiseCollectionName" type="string" lcioOutType="TrackerData"> m26_noise </parameter>
  <!--Pedestal local collection-->
  <parameter name="PedestalCollectionName" type="string" lcioOutType="TrackerData"> m26_pedestal </parameter>
  <!--Pixel status collection-->
  <parameter name="StatusCollectionName" type="string" lcioOutType="TrackerRawData"> m26_status </parameter>
  <!--The initial value of noise (one value for detector)-->
  <parameter name="InitNoiseValue" type="FloatVec"> 1 1 1 1 1 1 </parameter>
  <!--The initial value of pedestal (one value for detector)-->
  <parameter name="InitPedestalValue" type="FloatVec"> 0 0 0 0 0 0 </parameter>
  <!--The maximum pixel along x (default 255, one value per detector)-->
  <parameter name="MaxXVector" type="IntVec"> 1151 1151 1151 1151 1151 1151</parameter>
  <!--The maximum pixel along y (default 255, one value per detector)-->
  <parameter name="MaxYVector" type="IntVec"> 575 575 575 575 575 575  </parameter>
  <!--The minimum pixel along x (default 0, one value per detector)-->
  <parameter name="MinXVector" type="IntVec"> 0 0 0 0 0 0  </parameter>
  <!--The minimum pixel along y (default 0, one value per detector)-->
  <parameter name="MinYVector" type="IntVec"> 0 0 0 0 0 0</parameter>
  <!--The sensorID for the generated collection (one per detector)-->
  <parameter name="SensorIDVec" type="IntVec"> 0 1 2 3 4 5 </parameter>
</processor>


  <processor name="Clustering" type="EUTelClusteringProcessor">
    <!--EUTelClusteringProcessor is looking for clusters into a calibrated pixel matrix.-->

    <!--
        INPUT / OUTPUT
    -->
    <!--Input calibrated data not zero suppressed collection name-->
    <parameter name="NZSDataCollectionName" type="string" lcioInType="TrackerData"> data </parameter>
    <!--Noise (input) collection name-->
    <parameter name="NoiseCollectionName" type="string" lcioInType="TrackerData"> m26_noise </parameter>
    <!--Pixel status (input) collection name-->
    <parameter name="StatusCollectionName" type="string" lcioInType="TrackerRawData"> m26_status </parameter>
    <!--Input of Zero Suppressed data-->
    <parameter name="ZSDataCollectionName" type="string" lcioInType="TrackerData"> zsdata_m26 </parameter>
    <!--Cluster (output) collection name-->
    <parameter name="PulseCollectionName" type="string" lcioOutType="TrackerPulse"> cluster </parameter>

    <!--
        Clustering algorithm
    -->
    <!--Select here which algorithm should be used for NZS clustering.
        Available algorithms are:
        -> FixedFrame: for custer with a given size-->
    <parameter name="ClusteringAlgo" type="string" value="FixedFrame"/>

    <!--Select here which algorithm should be used for ZS clustering.
        Available algorithms are:
        -> SparseCluster: for cluster in ZS frame
        -> SparseCluster2: for cluster in ZS frame with better performance
        -> FixedFrame: for cluster with a given size-->
    <parameter name="ZSClusteringAlgo" type="string" value="DFixedFrame"/>


    <!--
        FIXED FRAME ( for both NZS and ZS )
    -->
    <!--Threshold in SNR for seed pixel identification-->
    <parameter name="FFSeedCut" type="float" value="3.5"/>
    <!--Threshold in SNR for cluster identification-->
    <parameter name="FFClusterCut" type="float" value="2.5"/>
    <!--Maximum allowed cluster size along x (only odd numbers)-->
    <parameter name="FFClusterSizeX" type="int" value="3"/>
    <!--Maximum allowed cluster size along y (only odd numbers)-->
    <parameter name="FFClusterSizeY" type="int" value="3"/>

    <!--
        SPARSECLUSTER and SPARSECLUSTER2 (use with care)
    -->
    <!--Threshold in SNR for clusters contained in ZS data-->
    <parameter name="SparseClusterCut" type="float" value="2.5"/>
    <!--Threshold in SNR for seed pixel contained in ZS data-->
    <parameter name="SparseSeedCut" type="float" value="3.5"/>
    <!--Minimum distance between sparsified pixel ( touching == sqrt(2)) -->
    <parameter name="SparseMinDistance" type="float" value="0"/>

    <!--
        HISTOGRAMMING
    -->
    <!--Switch on or off the histogram filling-->
    <parameter name="HistogramFilling" type="bool" value="true"/>
    <!--This is the name of the histogram information file-->
    <parameter name="HistoInfoFileName" type="string" value="@HistoInfoPath@/@HistoInfo@"/>
    <!--The list of cluster N to be filled.For example 7 means filling the cluster spectra with the 7 most significant pixels-->
    <parameter name="ClusterN" type="IntVec" value="4 6 8 9"/>
    <!--The list of cluster NxN to be filled.For example 3 means filling the 3x3 histogram spectrum-->
    <parameter name="ClusterNxN" type="IntVec" value="3"/>

  </processor>


  <processor name="Clustering_@DUTSuffix@" type="EUTelClusteringProcessor">
    <!--EUTelClusteringProcessor is looking for clusters into a calibrated pixel matrix.-->

    <!--
        INPUT / OUTPUT
    -->
    <!--Input calibrated data not zero suppressed collection name-->
    <parameter name="NZSDataCollectionName" type="string" lcioInType="TrackerData"> data_@DUTSuffix@ </parameter>
    <!--Noise (input) collection name-->
    <parameter name="NoiseCollectionName" type="string" lcioInType="TrackerData"> noise_@DUTSuffix@ </parameter>
    <!--Pixel status (input) collection name-->
    <parameter name="StatusCollectionName" type="string" lcioInType="TrackerRawData"> status_@DUTSuffix@ </parameter>
    <!--Input of Zero Suppressed data-->
    <parameter name="ZSDataCollectionName" type="string" lcioInType="TrackerData"> zsdata_@DUTSuffix@ </parameter>
    <!--Cluster (output) collection name-->
    <parameter name="PulseCollectionName" type="string" lcioOutType="TrackerPulse"> cluster_@DUTSuffix@ </parameter>

    <!--
        Clustering algorithm
    -->
    <!--Select here which algorithm should be used for NZS clustering.
        Available algorithms are:
        -> FixedFrame: for custer with a given size-->
    <parameter name="ClusteringAlgo" type="string" value="FixedFrame"/>

    <!--Select here which algorithm should be used for ZS clustering.
        Available algorithms are:
        -> SparseCluster: for cluster in ZS frame
        -> SparseCluster2: for cluster in ZS frame with better performance
        -> FixedFrame: for cluster with a given size-->
    <parameter name="ZSClusteringAlgo" type="string" value="FixedFrame"/>


    <!--
        FIXED FRAME ( for both NZS and ZS )
    -->
    <!--Threshold in SNR for seed pixel identification-->
    <parameter name="FFSeedCut" type="float" value="3.5"/>
    <!--Threshold in SNR for cluster identification-->
    <parameter name="FFClusterCut" type="float" value="2.5"/>
    <!--Maximum allowed cluster size along x (only odd numbers)-->
    <parameter name="FFClusterSizeX" type="int" value="3"/>
    <!--Maximum allowed cluster size along y (only odd numbers)-->
    <parameter name="FFClusterSizeY" type="int" value="3"/>

    <!--
        SPARSECLUSTER and SPARSECLUSTER2 (use with care)
    -->
    <!--Threshold in SNR for clusters contained in ZS data-->
    <parameter name="SparseClusterCut" type="float" value="2.5"/>
    <!--Threshold in SNR for seed pixel contained in ZS data-->
    <parameter name="SparseSeedCut" type="float" value="3.5"/>
    <!--Minimum distance between sparsified pixel ( touching == sqrt(2)) -->
    <parameter name="SparseMinDistance" type="float" value="0"/>

    <!--
        HISTOGRAMMING
    -->
    <!--Switch on or off the histogram filling-->
    <parameter name="HistogramFilling" type="bool" value="true"/>
    <!--This is the name of the histogram information file-->
    <parameter name="HistoInfoFileName" type="string" value="@HistoInfoPath@/@HistoInfo@"/>
    <!--The list of cluster N to be filled.For example 7 means filling the cluster spectra with the 7 most significant pixels-->
    <parameter name="ClusterN" type="IntVec" value="4 6 8 9"/>
    <!--The list of cluster NxN to be filled.For example 3 means filling the 3x3 histogram spectrum-->
    <parameter name="ClusterNxN" type="IntVec" value="3"/>

  </processor>

  <processor name="Correlator" type="EUTelCorrelator">
    <!--EUTelCorrelator fills histograms with correlation plots-->
    <!--Cluster (pulse) collection name-->
    <parameter name="InputClusterCollectionName" type="string" lcioInType="TrackerPulse"> cluster </parameter>
    <!--Hit collection name-->
    <parameter name="InputHitCollectionName" type="string" lcioInType="TrackerHit"> hit </parameter>
  </processor>

  <processor name="HotPixelKiller" type="EUTelHotPixelKiller">
    <!--EUTelHotPixelKiller periodically check for pixel singing loud too often and remove them from the analysis-->
    <!--Pixel status collection-->
    <parameter name="StatusCollectionName" type="string" lcioInType="TrackerRawData"> m26_status </parameter>
    <!--This float number [0,1] represents the maximum allowed firing frequency
        within the selected number of event per cycle-->
    <parameter name="MaxAllowedFiringFreq" type="float" value="0.15"/>
    <!--The number of events to be considered for each update cycle-->
    <parameter name="NoOfEventPerCycle" type="int" value="100"/>
    <!--The total number of hot pixel cycle-->
    <parameter name="TotalNoOfCycle" type="int" value="5"/>
  </processor>

  <processor name="Save" type="EUTelOutputProcessor">
    <!--Writes the current event to the specified LCIO outputfile. Eventually it adds a EORE at the of the file if it was missing Needs to be the last ActiveProcessor.-->
    <!--drops the named collections from the event-->
    <parameter name="DropCollectionNames" type="StringVec"> 
           rawdata status noise pedestal data zsdata 
           rawdata_@DUTSuffix@ status_@DUTSuffix@  noise_@DUTSuffix@  pedestal_@DUTSuffix@  data_@DUTSuffix@ zsdata_@DUTSuffix@ 
    </parameter>
    <!--drops all collections of the given type from the event-->
    <!--parameter name="DropCollectionTypes" type="StringVec"> SimTrackerHit SimCalorimeterHit </parameter-->
    <!-- write complete objects in subset collections to the file (i.e. ignore subset flag)-->
    <!--parameter name="FullSubsetCollections" type="StringVec" value="MCParticlesSkimmed"/-->
    <!--force keep of the named collections - overrules DropCollectionTypes (and DropCollectionNames)-->
    <!--parameter name="KeepCollectionNames" type="StringVec" value="MyPreciousSimTrackerHits"/-->
    <!-- name of output file -->
    <parameter name="LCIOOutputFile" type="string" value="@ResultPath@/run@RunNumber@-clu@FilenameHyphen@@FilenameSuffix@-p@PedeRunNumber@.slcio"/>
    <!--write mode for output file:  WRITE_APPEND or WRITE_NEW-->
    <parameter name="LCIOWriteMode" type="string" value="WRITE_NEW"/>
    <!--Set it to true to remove intermediate EORE in merged runs-->
    <parameter name="SkipIntermediateEORE" type="bool" value="true"/>
    <!--will split output file if size in kB exceeds given value - doesn't work with APPEND and NEW-->
    <!--parameter name="SplitFileSizekB" type="int" value="1992294"/-->
  </processor>

</marlin>
