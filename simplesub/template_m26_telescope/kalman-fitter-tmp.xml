<?xml version="1.0" encoding="us-ascii"?>
<!-- ?xml-stylesheet type="text/xsl" href="http://ilcsoft.desy.de/marlin/marlin.xsl"? -->
<!-- ?xml-stylesheet type="text/xsl" href="marlin.xsl"? -->

<!-- 

==========================================================================================
Steering file template for the pysub framework

==> fitter-tmp.xml <===

Author: Antonio Bulgheroni, INFN <mailto:antonio.bulgheroni@gmail.com>
Version: $Id: fitter-tmp.xml,v 1.7 2009-08-01 13:59:45 bulgheroni Exp $
==========================================================================================

--> 

<marlin xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://ilcsoft.desy.de/marlin/marlin.xsd">

  <execute>
    <processor name="AIDA"/>
    <processor name="LoadAlignmentTel"/>
    <processor name="ApplyAlignmentTel"/>
    <processor name="LoadAlignmentDut"/>
    <processor name="ApplyAlignmentDut"/>
    <processor name="KalmanFitter"/>
    <processor name="APIXTbTrack"/>
  </execute>

  <global>
    <parameter name="LCIOInputFiles"> @ResultPath@/run@RunNumber@-hit-p.slcio </parameter>
    <parameter name="GearXMLFile" value="@GearFile@"/>
    <parameter name="MaxRecordNumber" value="@RecordNumber@"/>
    <parameter name="SkipNEvents" value="@SkipNEvents@"/>
    <parameter name="SupressCheck" value="false"/>
    <parameter name="Verbosity" value="MESSAGE"/>
  </global>


  <processor name="AIDA" type="AIDAProcessor">
    <!--Processor that handles AIDA files. Creates on directory per processor.  Processors only need to create and fill the histograms, clouds and tuples. Needs to be the first ActiveProcessor-->
    <!-- compression of output file 0: false >0: true (default) -->
    <parameter name="Compress" type="int" value="1"/>
    <!-- filename without extension-->
    <parameter name="FileName" type="string" value= "@HistoPath@/run@RunNumber@-fitter-histo"/>
    <!-- type of output file xml (default) or root ( only OpenScientist)-->
    <parameter name="FileType" type="string" value="root"/>
  </processor>

  <processor name="LoadAlignmentTel" type="ConditionsProcessor">
    <!--ConditionsProcessor provides access to conditions data  transparently from LCIO files or a databases, using LCCD-->
    <!--Initialization of a conditions database handler-->
    <!--parameter name="DBCondHandler" type="StringVec"> conditionsName /lccd/myfolder HEAD </parameter-->
    <!--Initialization of a conditions db file handler-->
    <!--parameter name="DBFileHandler" type="StringVec"> conditionsName conditions.slcio collectionName </parameter-->
    <!--Initialization string for conditions database-->
    <parameter name="DBInit" type="string" value="localhost:lccd_test:align:tel"/>
    <!--Initialization of a data file handler-->
    <!--parameter name="DataFileHandler" type="StringVec" value="conditionsName"/-->
    <!--Initialization of a simple conditions file handler-->
    <parameter name="SimpleFileHandler" type="StringVec"> alignmenttel @DbPath@/@TelAlignmentDb@ alignment </parameter>
  </processor>

  <processor name="LoadAlignmentDut" type="ConditionsProcessor">
    <!--ConditionsProcessor provides access to conditions data  transparently from LCIO files or a databases, using LCCD-->
    <!--Initialization of a conditions database handler-->
    <!--parameter name="DBCondHandler" type="StringVec"> conditionsName /lccd/myfolder HEAD </parameter-->
    <!--Initialization of a conditions db file handler-->
    <!--parameter name="DBFileHandler" type="StringVec"> conditionsName conditions.slcio collectionName </parameter-->
    <!--Initialization string for conditions database-->
    <parameter name="DBInit" type="string" value="localhost:lccd_test:align:dut"/>
    <!--Initialization of a data file handler-->
    <!--parameter name="DataFileHandler" type="StringVec" value="conditionsName"/-->
    <!--Initialization of a simple conditions file handler-->
    <parameter name="SimpleFileHandler" type="StringVec"> alignmentdut @DbPath@/@DutAlignmentDb@ alignment </parameter>
  </processor>

  <processor name="ApplyAlignmentTel" type="EUTelAPIXApplyAlignment">
    <!--Apply to the input hit the alignment corrections-->
    <!--Alignment constant from the condition file-->
    <parameter name="AlignmentConstantName" type="string" lcioInType="LCGenericObject"> alignmenttel </parameter>
    <!--The name of the input hit collection-->
    <parameter name="InputHitCollectionName" type="string" lcioInType="TrackerHit"> hit </parameter>
    <!--The name of the output hit collection-->
    <parameter name="OutputHitCollectionName" type="string" lcioOutType="TrackerHit"> alignedTelHit</parameter>
    <!--Available methods are:
	0 --> shift only 
    1 --> rotation first 
    2 --> shift first -->
    <parameter name="CorrectionMethod" type="int" value="1"/>
    <!--Enable or disable histograms-->
    <parameter name="HistogramSwitch" type="bool" value="true"/>
  </processor>

  <processor name="ApplyAlignmentDut" type="EUTelAPIXApplyAlignment">
    <!--Apply to the input hit the alignment corrections-->
    <!--Alignment constant from the condition file-->
    <parameter name="AlignmentConstantName" type="string" lcioInType="LCGenericObject"> alignmentdut </parameter>
    <!--The name of the input hit collection-->
    <parameter name="InputHitCollectionName" type="string" lcioInType="TrackerHit"> alignedTelHit </parameter>
    <!--The name of the output hit collection-->
    <parameter name="OutputHitCollectionName" type="string" lcioOutType="TrackerHit"> alignedHit</parameter>
    <parameter name="CorrectionMethod" type="int" value="1"/>
    <!--Enable or disable histograms-->
    <parameter name="HistogramSwitch" type="bool" value="true"/>
  </processor>

  <processor name="KalmanFitter" type="EUTelAPIXKalman">
    <parameter name="HitCollectionName" type="string" lcioInType="TrackerHit"> alignedHit </parameter>
    <parameter name="TrackCollectionName" type="string" lcioInType="Track"> track </parameter>
    <parameter name="RunPede" type="int" value="False"/>
    <parameter name="ExcludePlanes" type="IntVec"> @ExcludePlanes@ </parameter>
    <parameter name="InTimeCheck" type="IntVec"> @InTimeCheck@</parameter>
    <parameter name="IncludeScatter" type="bool" value="true"/>
    <parameter name="UseResidualCuts" type="bool" value="@UseResidualCuts@"/>
    <parameter name="ResidualsXMin" type="FloatVec"> @ResidualXMin@ </parameter>
    <parameter name="ResidualsXMax" type="FloatVec"> @ResidualXMax@ </parameter>
    <parameter name="ResidualsYMin" type="FloatVec"> @ResidualYMin@ </parameter>
    <parameter name="ResidualsYMax" type="FloatVec"> @ResidualYMax@ </parameter>
    <parameter name="AddToLCIO" type="bool" value="true"/>
    <parameter name="DistanceMax" type="float"> @DistanceMax@ </parameter>
    <parameter name="Ebeam" type="double" value="@BeamEnergy@"/>
    <parameter name="AllowNSkippedPlanes" type="int" value="@AllowNSkippedPlanes@"/>
    <parameter name="MaxChi2" type="float" value="@MaxChi2@"/>
    <parameter name="MinDxDz" type="float" value="@MinDxDz@"/>
    <parameter name="MaxDxDz" type="float" value="@MaxDxDz@"/>
    <parameter name="MinDyDz" type="float" value="@MinDyDz@"/>
    <parameter name="MaxDyDz" type="float" value="@MaxDyDz@"/>
  </processor> 

  <processor name="APIXTbTrack" type="EUTelAPIXTbTrackTuple">
    <parameter name="OutputPath" type ="string" value="@ResultPath@/tbtrack@RunNumber@.root"/>
    <!--Prepare n-tuple with track fit results-->
    <!--Name of the input Track collection-->
    <parameter name="InputCollectionName" type="string" lcioInType="Track"> track </parameter>
    <!--Name of the input pulse collections-->
    <parameter name="InputPulseCollectionName" type="string" lcioInType="TrackerPulse"> cluster_apix </parameter>
    <!--Name of the input hit collection-->
    <parameter name="InputTrackerHitCollectionName" type="string" lcioInType="TrackerHit"> alignedHit</parameter>
    <!--Name of the input DUT hit collection-->
    <parameter name="InputTrackerHitCollectionName" type="string" lcioInType="TrackerHit">  aligned_hit_m26</parameter>
    <!-- Alignment constants-->
    <parameter name="DutAlignmentConstantName" type="string" lcioInType="LCGenericObject"> alignmentdut </parameter>
    <parameter name="Dut2AlignmentConstantName" type="string" lcioInType="LCGenericObject"> alignmentdut2 </parameter>
    <parameter name="TelAlignmentConstantName" type="string" lcioInType="LCGenericObject"> alignmenttel </parameter>
    <!-- Make detailed TTree-output for the following sensor-IDs -->
    <parameter name="MakeAllLeaves" type="IntVec"> 13 14 15 16 17 </parameter>
    <parameter name="MoveXY" type="StringVec"> 0 0 0 </parameter>
  </processor>

</marlin>
