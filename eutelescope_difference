diff --git a/jobsub/examples/pALPIDEfs/config_pALPIDEfs_7.cfg b/jobsub/examples/pALPIDEfs/config_pALPIDEfs_7.cfg
index 7cc7165..be3c13d 100644
--- a/jobsub/examples/pALPIDEfs/config_pALPIDEfs_7.cfg
+++ b/jobsub/examples/pALPIDEfs/config_pALPIDEfs_7.cfg
@@ -49,7 +49,7 @@ HotpixelRunNumber	= @RunNumber@
 SkipNEvents		= 0
 
 # Limit processing of a run to a certain number of events
-MaxRecordNumber		= 10000000
+MaxRecordNumber		= 100000
 
 # The verbosity used by the EUTelescope producers (i.e. MESSAGE, DEBUG, ERROR
 # with appended level from 0..9, e.g. MESSAGE5). If you set this to DEBUG0 but
diff --git a/jobsub/examples/pALPIDEfs/gear_ALPIDE_oldsetup.xml b/jobsub/examples/pALPIDEfs/gear_ALPIDE_oldsetup.xml
index 916afc6..d4ec1f8 100644
--- a/jobsub/examples/pALPIDEfs/gear_ALPIDE_oldsetup.xml
+++ b/jobsub/examples/pALPIDEfs/gear_ALPIDE_oldsetup.xml
@@ -30,7 +30,7 @@
 	<!--pALPIDEfs Plane 1 -->
 	<layer>
 	  <ladder 	ID="1" 
-			positionX="0"		positionY="0"		positionZ="19.7" 
+			positionX="0"		positionY="0"		positionZ="19.6" 
 			rotationZY="0.0"	rotationZX="0.0"	rotationXY="0.0" 
 			sizeX="28.672"		sizeY="14.336"		thickness="1.6" 
 			radLength="159.225"
@@ -48,7 +48,7 @@
 	<!--pALPIDEfs Plane 2 -->
 	<layer>
 	  <ladder 	ID="2" 
-			positionX="0"		positionY="0"		positionZ="39.4" 
+			positionX="0"		positionY="0"		positionZ="39.2" 
 			rotationZY="0.0"	rotationZX="0.0"	rotationXY="0.0" 
 			sizeX="28.672"		sizeY="14.336"		thickness="1.6" 
 			radLength="159.225"
@@ -66,7 +66,7 @@
 	<!--pALPIDEfs Plane 3 position : 71.9 correct-->
 	<layer> 
 	  <ladder 	ID="3" 
-			positionX="0"		positionY="0"		positionZ="68.9" 
+			positionX="0"		positionY="0"		positionZ="58.8" 
 			rotationZY="0.0"	rotationZX="0.0"	rotationXY="0.0" 
 			sizeX="29.94176"	sizeY="13.76256"	thickness="1.6" 
 			radLength="159.225"
@@ -84,7 +84,7 @@
 	<!--pALPIDEfs Plane 4 -->
 	<layer>
 	  <ladder 	ID="4" 
-			positionX="0"		positionY="0"		positionZ="104.4" 
+			positionX="0"		positionY="0"		positionZ="78.4" 
 			rotationZY="0.0"	rotationZX="0.0"	rotationXY="0.0" 
 			sizeX="28.672"		sizeY="14.336"		thickness="1.6" 
 			radLength="159.225"
@@ -102,7 +102,7 @@
 	<!--pALPIDEfs Plane 5 -->
 	<layer>
 	  <ladder 	ID="5" 
-	  		positionX="0"		positionY="0"		positionZ="124.1" 
+	  		positionX="0"		positionY="0"		positionZ="98" 
 			rotationZY="0.0"	rotationZX="0.0"	rotationXY="0.0" 
 			sizeX="28.672"		sizeY="14.336"		thickness="1.6" 
 			radLength="159.225"
@@ -120,7 +120,7 @@
 	<!--pALPIDEfs Plane 6 -->
 	<layer>
 	  <ladder 	ID="6" 
-			positionX="0"		positionY="0"		positionZ="143.8" 
+			positionX="0"		positionY="0"		positionZ="117,6" 
 			rotationZY="0.0"	rotationZX="0.0"	rotationXY="0.0" 
 			sizeX="28.672"	sizeY="14.336"	thickness="1.6" 
 			radLength="159.225"
@@ -138,4 +138,4 @@
       </layers>
     </detector>
   </detectors>
-</gear>
+</gear>	
diff --git a/jobsub/examples/pALPIDEfs/gear_pALPIDE-3_example_withoutCarrierMaterial_copy.xml b/jobsub/examples/pALPIDEfs/gear_pALPIDE-3_example_withoutCarrierMaterial_copy.xml
new file mode 100644
index 0000000..4901843
--- /dev/null
+++ b/jobsub/examples/pALPIDEfs/gear_pALPIDE-3_example_withoutCarrierMaterial_copy.xml
@@ -0,0 +1,141 @@
+<gear>
+  <!--GEAR file for ITS upgrade pALPIDEfs usual setup (18 mm spacers between layers, meaning 19.6 mm distance not including material of carrier card) -->
+  <global detectorName="EUTelescope"/>
+  <BField type="ConstantBField" x="0.0" y="0.0" z="0.0"/>
+  <detectors>
+    <detector name="SiPlanes" geartype="SiPlanesParameters">
+      <siplanesID ID="0"/>
+      <siplanesType type="TelescopeWithoutDUT"/>
+      <siplanesNumber number="1"/>
+      <!-- z along beam -->
+      <layers>
+	<!--pALPIDEfs Plane 0 -->
+	<layer>
+	  <ladder 	ID="0" 
+			positionX="0.00"	positionY="0.00"	positionZ="0" 
+			rotationZY="0.0"	rotationZX="0.0"	rotationXY="0.0" 
+			sizeX="29.94176"	sizeY="13.76256"		thickness="0.432" 
+			radLength="93.660734"
+			/>
+	  <sensitive 	ID="0" 
+			positionX="0.00"	positionY="0.00"	positionZ="0" 
+			sizeX="29.94176"	sizeY="13.76256"		thickness="0.018"
+			npixelX="1024"		npixelY="512"
+			pitchX="0.02924"	pitchY="0.02688" 		resolution="0.0055"
+			rotation1="-1.0"	rotation2="0.0"
+			rotation3="0.0" 	rotation4="-1.0" 
+			radLength="93.660734"
+			/>
+	</layer>
+	<!--pALPIDEfs Plane 1 -->
+	<layer>
+	  <ladder 	ID="1" 
+			positionX="0"		positionY="0"		positionZ="20.0" 
+			rotationZY="0.0"	rotationZX="0.0"	rotationXY="0.0" 
+			sizeX="29.94176"	sizeY="13.76256"		thickness="0.032" 
+			radLength="93.660734"
+			/>
+	  <sensitive 	ID="1" 
+			positionX="0"		positionY="0"		positionZ="20.0" 
+			sizeX="29.94176"	sizeY="13.76256"		thickness="0.018"
+			npixelX="1024"		npixelY="512"
+			pitchX="0.02924"	pitchY="0.02688" 		resolution="0.0055"
+			rotation1="-1.0"	rotation2="0.0"
+			rotation3="0.0" 	rotation4="-1.0" 
+			radLength="93.660734"
+			/>
+	</layer>
+	<!--pALPIDEfs Plane 2 -->
+	<layer>
+	  <ladder 	ID="2" 
+			positionX="0"		positionY="0"		positionZ="40.0" 
+			rotationZY="0.0"	rotationZX="0.0"	rotationXY="0.0" 
+			sizeX="29.94176"	sizeY="13.76256"		thickness="0.032" 
+			radLength="93.660734"
+			/>
+	  <sensitive 	ID="2" 
+			positionX="0"		positionY="0"		positionZ="40.0" 
+			sizeX="29.94176"	sizeY="13.76256"		thickness="0.018"
+			npixelX="1024"		npixelY="512"
+			pitchX="0.02924"	pitchY="0.02688" 		resolution="0.0055"
+			rotation1="-1.0"	rotation2="0.0"
+			rotation3="0.0" 	rotation4="-1.0" 
+			radLength="93.660734"
+			/>
+	</layer>
+	<!--pALPIDEfs Plane 3 -->
+	<layer>
+	  <ladder 	ID="3" 
+			positionX="0"		positionY="0"		positionZ="60.0" 
+			rotationZY="0.0"	rotationZX="0.0"	rotationXY="0.0" 
+			sizeX="29.94176"	sizeY="13.76256"		thickness="0.032" 
+			radLength="93.660734"
+			/>
+	  <sensitive 	ID="3" 
+			positionX="0"   	positionY="0"		positionZ="60.0" 
+			sizeX="29.94176"	sizeY="13.76256"		thickness="0.018"
+			npixelX="1024"		npixelY="512"
+			pitchX="0.02924"	pitchY="0.02688" 		resolution="0.0055"
+			rotation1="-1.0"	rotation2="0.0"
+			rotation3="0.0" 	rotation4="-1.0" 
+			radLength="93.660734"
+			/>
+	</layer>
+	<!--pALPIDEfs Plane 4 -->
+	<layer>
+	  <ladder 	ID="4" 
+			positionX="0"		positionY="0"		positionZ="80.0" 
+			rotationZY="0.0"	rotationZX="0.0"	rotationXY="0.0" 
+			sizeX="29.94176"	sizeY="13.76256"	thickness="0.032" 
+			radLength="93.660734"
+			/>
+	  <sensitive 	ID="4" 
+			positionX="0"		positionY="0"		positionZ="80.0" 
+			sizeX="29.94176"	sizeY="13.76256"	thickness="0.018"
+			npixelX="1024"		npixelY="512"
+			pitchX="0.02924"	pitchY="0.02688"	resolution="0.0055"
+			rotation1="-1.0"	rotation2="0.0"
+			rotation3="0.0" 	rotation4="-1.0" 
+			radLength="93.660734"
+			/>
+	</layer>
+	<!--pALPIDEfs Plane 5 -->
+	<layer>
+	  <ladder 	ID="5" 
+			positionX="0"		positionY="0"		positionZ="100.0" 
+			rotationZY="0.0"	rotationZX="0.0"	rotationXY="0.0" 
+			sizeX="29.94176"	sizeY="13.76256"	thickness="0.032" 
+			radLength="93.660734"
+			/>
+	  <sensitive 	ID="5" 
+			positionX="0"		positionY="0"		positionZ="100.0" 
+			sizeX="29.94176"	sizeY="13.76256"	thickness="0.018"
+			npixelX="1024"		npixelY="512"
+			pitchX="0.02924"	pitchY="0.02688"	resolution="0.0055"
+			rotation1="-1.0"	rotation2="0.0"
+			rotation3="0.0" 	rotation4="-1.0" 
+			radLength="93.660734"
+			/>
+	</layer>
+	<!--pALPIDEfs Plane 6 -->
+	<layer>
+	  <ladder 	ID="6" 
+			positionX="0"		positionY="0"		positionZ="120.0" 
+			rotationZY="0.0"	rotationZX="0.0"	rotationXY="0.0" 
+			sizeX="29.94176"	sizeY="13.76256"	thickness="0.432" 
+			radLength="93.660734"
+			/>
+	  <sensitive 	ID="6" 
+			positionX="0"		positionY="0"		positionZ="120.0" 
+			sizeX="29.94176"	sizeY="13.76256"	thickness="0.018"
+			npixelX="1024"		npixelY="512"
+			pitchX="0.02924"	pitchY="0.02688"	resolution="0.0055"
+			rotation1="-1.0"	rotation2="0.0"
+			rotation3="0.0" 	rotation4="-1.0" 
+			radLength="93.660734"
+			/>
+	</layer>
+      </layers>
+    </detector>
+  </detectors>
+</gear>
diff --git a/jobsub/examples/pALPIDEfs/gear_pALPIDEfs_example_withoutCarrierMaterial.xml b/jobsub/examples/pALPIDEfs/gear_pALPIDEfs_example_withoutCarrierMaterial.xml
new file mode 100644
index 0000000..3ed9404
--- /dev/null
+++ b/jobsub/examples/pALPIDEfs/gear_pALPIDEfs_example_withoutCarrierMaterial.xml
@@ -0,0 +1,141 @@
+<gear>
+  <!--GEAR file for ITS upgrade pALPIDEfs usual setup (18 mm spacers between layers, meaning 19.6 mm distance not including material of carrier card) -->
+  <global detectorName="EUTelescope"/>
+  <BField type="ConstantBField" x="0.0" y="0.0" z="0.0"/>
+  <detectors>
+    <detector name="SiPlanes" geartype="SiPlanesParameters">
+      <siplanesID ID="0"/>
+      <siplanesType type="TelescopeWithoutDUT"/>
+      <siplanesNumber number="7"/>
+      <!-- z along beam -->
+      <layers>
+	<!--pALPIDEfs Plane 0 -->
+	<layer>
+	  <ladder 	ID="0" 
+			positionX="0.00"	positionY="0.00"	positionZ="0" 
+			rotationZY="0.0"	rotationZX="0.0"	rotationXY="0.0" 
+			sizeX="28.672"		sizeY="14.336"		thickness="0.432" 
+			radLength="93.660734"
+			/>
+	  <sensitive 	ID="0" 
+			positionX="0.00"	positionY="0.00"	positionZ="0" 
+			sizeX="28.672"		sizeY="14.336"		thickness="0.018"
+			npixelX="1024"		npixelY="512"
+			pitchX="0.028"		pitchY="0.028" 		resolution="0.0055"
+			rotation1="-1.0"	rotation2="0.0"
+			rotation3="0.0" 	rotation4="-1.0" 
+			radLength="93.660734"
+			/>
+	</layer>
+	<!--pALPIDEfs Plane 1 -->
+	<layer>
+	  <ladder 	ID="1" 
+			positionX="0"		positionY="0"		positionZ="19.6" 
+			rotationZY="0.0"	rotationZX="0.0"	rotationXY="0.0" 
+			sizeX="28.672"		sizeY="14.336"		thickness="0.032" 
+			radLength="93.660734"
+			/>
+	  <sensitive 	ID="1" 
+			positionX="0"		positionY="0"		positionZ="19.6" 
+			sizeX="28.672"		sizeY="14.336"		thickness="0.018"
+			npixelX="1024"		npixelY="512"
+			pitchX="0.028"		pitchY="0.028" 		resolution="0.0055"
+			rotation1="-1.0"	rotation2="0.0"
+			rotation3="0.0" 	rotation4="-1.0" 
+			radLength="93.660734"
+			/>
+	</layer>
+	<!--pALPIDEfs Plane 2 -->
+	<layer>
+	  <ladder 	ID="2" 
+			positionX="0"		positionY="0"		positionZ="39.2" 
+			rotationZY="0.0"	rotationZX="0.0"	rotationXY="0.0" 
+			sizeX="28.672"		sizeY="14.336"		thickness="0.032" 
+			radLength="93.660734"
+			/>
+	  <sensitive 	ID="2" 
+			positionX="0"		positionY="0"		positionZ="39.2" 
+			sizeX="28.672"		sizeY="14.336"		thickness="0.018"
+			npixelX="1024"		npixelY="512"
+			pitchX="0.028"		pitchY="0.028" 		resolution="0.0055"
+			rotation1="-1.0"	rotation2="0.0"
+			rotation3="0.0" 	rotation4="-1.0" 
+			radLength="93.660734"
+			/>
+	</layer>
+	<!--pALPIDEfs Plane 3 -->
+	<layer>
+	  <ladder 	ID="3" 
+			positionX="0"		positionY="0"		positionZ="58.8" 
+			rotationZY="0.0"	rotationZX="0.0"	rotationXY="0.0" 
+			sizeX="28.672"		sizeY="14.336"		thickness="0.032" 
+			radLength="93.660734"
+			/>
+	  <sensitive 	ID="3" 
+			positionX="0"   	positionY="0"		positionZ="58.8" 
+			sizeX="28.672"		sizeY="14.336"		thickness="0.018"
+			npixelX="1024"		npixelY="512"
+			pitchX="0.028"		pitchY="0.028" 		resolution="0.0055"
+			rotation1="-1.0"	rotation2="0.0"
+			rotation3="0.0" 	rotation4="-1.0" 
+			radLength="93.660734"
+			/>
+	</layer>
+	<!--pALPIDEfs Plane 4 -->
+	<layer>
+	  <ladder 	ID="4" 
+			positionX="0"		positionY="0"		positionZ="78.4" 
+			rotationZY="0.0"	rotationZX="0.0"	rotationXY="0.0" 
+			sizeX="28.672"		sizeY="14.336"		thickness="0.032" 
+			radLength="93.660734"
+			/>
+	  <sensitive 	ID="4" 
+			positionX="0"		positionY="0"		positionZ="78.4" 
+			sizeX="28.672"		sizeY="14.336"		thickness="0.018"
+			npixelX="1024"		npixelY="512"
+			pitchX="0.028"		pitchY="0.028" 		resolution="0.0055"
+			rotation1="-1.0"	rotation2="0.0"
+			rotation3="0.0" 	rotation4="-1.0" 
+			radLength="93.660734"
+			/>
+	</layer>
+	<!--pALPIDEfs Plane 5 -->
+	<layer>
+	  <ladder 	ID="5" 
+			positionX="0"		positionY="0"		positionZ="98" 
+			rotationZY="0.0"	rotationZX="0.0"	rotationXY="0.0" 
+			sizeX="28.672"		sizeY="14.336"		thickness="0.032" 
+			radLength="93.660734"
+			/>
+	  <sensitive 	ID="5" 
+			positionX="0"		positionY="0"		positionZ="98" 
+			sizeX="28.672"		sizeY="14.336"		thickness="0.018"
+			npixelX="1024"		npixelY="512"
+			pitchX="0.028"		pitchY="0.028" 		resolution="0.0055"
+			rotation1="-1.0"	rotation2="0.0"
+			rotation3="0.0" 	rotation4="-1.0" 
+			radLength="93.660734"
+			/>
+	</layer>
+	<!--pALPIDEfs Plane 6 -->
+	<layer>
+	  <ladder 	ID="6" 
+			positionX="0"		positionY="0"		positionZ="117.6" 
+			rotationZY="0.0"	rotationZX="0.0"	rotationXY="0.0" 
+			sizeX="28.672"		sizeY="14.336"		thickness="0.432" 
+			radLength="93.660734"
+			/>
+	  <sensitive 	ID="6" 
+			positionX="0"		positionY="0"		positionZ="117.6" 
+			sizeX="28.672"		sizeY="14.336"		thickness="0.018"
+			npixelX="1024"		npixelY="512"
+			pitchX="0.028"		pitchY="0.028" 		resolution="0.0055"
+			rotation1="-1.0"	rotation2="0.0"
+			rotation3="0.0" 	rotation4="-1.0" 
+			radLength="93.660734"
+			/>
+	</layer>
+      </layers>
+    </detector>
+  </detectors>
+</gear>
diff --git a/jobsub/examples/pALPIDEfs/runlist_example.csv b/jobsub/examples/pALPIDEfs/runlist_example.csv
index 9ce8afd..8cc2900 100644
--- a/jobsub/examples/pALPIDEfs/runlist_example.csv
+++ b/jobsub/examples/pALPIDEfs/runlist_example.csv
@@ -1,2 +1,3 @@
 RunNumber,BeamEnergy,GearGeoFile,DUTNumbers,ChipIDs,IrradiationLevel,Rate
-23,6.0,gear_pALPIDEfs3_example_withCarrierMaterial_data.xml,3,W1-18 W2-27 W6-39 W9-16 W6-14 W2-23 W1-17,0 0 0 0 0 0 0,PS
+6073,6.0,gear_pALPIDE-3_example_withoutCarrierMaterial_copy.xml,0,W1-18,0,PS
+
diff --git a/jobsub/examples/pALPIDEfs/steering-templates_pALPIDEfs_7/clustering-tmp.xml b/jobsub/examples/pALPIDEfs/steering-templates_pALPIDEfs_7/clustering-tmp.xml
index 710b97e..c9a99a8 100644
--- a/jobsub/examples/pALPIDEfs/steering-templates_pALPIDEfs_7/clustering-tmp.xml
+++ b/jobsub/examples/pALPIDEfs/steering-templates_pALPIDEfs_7/clustering-tmp.xml
@@ -148,6 +148,7 @@ Available types of the data format:
   <parameter name="SparseClusterCut" type="float" value="0.0"/>
   <!--Minimum distance between sparsified pixel ( touching == sqrt(2)) -->
   <parameter name="SparseMinDistance" type="float" value="1"/>
+  <parameter name="SparseMinDistanceSquared" type="float" value="4"/>
   <!--Threshold in SNR for seed pixel contained in ZS data-->
   <parameter name="SparseSeedCut" type="float" value="0.0"/>
   <!--verbosity level of this processor ("DEBUG0-4,MESSAGE0-4,WARNING0-4,ERROR0-4,SILENT")-->
diff --git a/jobsub/examples/pALPIDEfs/steering-templates_pALPIDEfs_7/hotpixel-tmp.xml b/jobsub/examples/pALPIDEfs/steering-templates_pALPIDEfs_7/hotpixel-tmp.xml
index 77ff7ce..669dd45 100644
--- a/jobsub/examples/pALPIDEfs/steering-templates_pALPIDEfs_7/hotpixel-tmp.xml
+++ b/jobsub/examples/pALPIDEfs/steering-templates_pALPIDEfs_7/hotpixel-tmp.xml
@@ -64,14 +64,14 @@
     <!--This float number [0,1] represents the maximum allowed firing frequency
          within the selected number of event per cycle-->
   <!--parameter name="MaxAllowedFiringFreq" type="float" value="1"/-->
-  <!--parameter name="MaxAllowedFiringFreq" type="float" value="0.001"/-->
+  <!--parameter name="MaxAllowedFiringFreq" type="float" value="0.01"/-->
   <parameter name="MaxAllowedFiringFreq" type="float" value="@MaxAllowedFiringFreq@"/>
     <!--The number of events to be considered for each update cycle-->
   <parameter name="NoOfEvents" type="int" value="@nEventsForHotpixel@"/>
     <!--The total number of hot pixel cycle-->
 <!--  <parameter name="TotalNoOfCycle" type="int" value="0"/> -->
     <!--The sensorID for the generated collection (one per detector)-->
-  <parameter name="SensorIDVec" type="IntVec"> 0 1 2 3 4 5 6 </parameter>
+  <parameter name="SensorIDVec" type="IntVec"> 0 </parameter>
     <!--verbosity level of this processor ("DEBUG0-4,MESSAGE0-4,WARNING0-4,ERROR0-4,SILENT")-->
   <parameter name="Verbosity" type="string" value="MESSAGE6"/>
 </processor>
diff --git a/processors/include/EUTelProcessorClusterAnalysis.h b/processors/include/EUTelProcessorClusterAnalysis.h
index 5ad63a3..d585de0 100644
--- a/processors/include/EUTelProcessorClusterAnalysis.h
+++ b/processors/include/EUTelProcessorClusterAnalysis.h
@@ -55,6 +55,7 @@ protected:
   int _nNoiseMaskClusters;
   int _nDeadColumnClusters;
   int _sectorWidth;
+  int _chipVersion;
   double _energy;
   EVENT::StringVec _chipID;
   EVENT::StringVec _irradiation;
@@ -79,10 +80,14 @@ private:
   int _nLayer;
   int _xPixel;
   int _yPixel;
+	int _sparseMinDistanceSquaredComparison;
   std::map<int,TH1I*> clusterWidthXHisto;
   std::map<int,TH1I*> clusterWidthYHisto;
   std::map<int,TH1I*> clusterSizeHisto;
   TH1I* timeStampHisto;
+  TH1I* GeneratedClustersHisto;
+  TH1I* MissingClusterHisto;
+  TH1I* HowManyClusterGeneratedFromOneCluster;
   TH2I* hotpixelHisto;
   TH2I* deadColumnHisto;
   TH2I* circularClusterHistos;
diff --git a/processors/src/EUTelClusterSeparationProcessor.cc b/processors/src/EUTelClusterSeparationProcessor.cc
index 3390364..01edef8 100644
--- a/processors/src/EUTelClusterSeparationProcessor.cc
+++ b/processors/src/EUTelClusterSeparationProcessor.cc
@@ -52,6 +52,7 @@ EUTelClusterSeparationProcessor::EUTelClusterSeparationProcessor () :Processor("
                            "Cluster collection name ",
                            _clusterCollectionName, string ("cluster"));
 
+
   // and the output collection
   registerOutputCollection (LCIO::TRACKERPULSE, "ClusterOutputCollectionName",
                             "Cluster output collection name",
@@ -100,6 +101,7 @@ void EUTelClusterSeparationProcessor::processEvent (LCEvent * event) {
 
   LCCollectionVec * clusterCollectionVec;
 
+
   try {
     clusterCollectionVec  =  dynamic_cast <LCCollectionVec *> (evt->getCollection(_clusterCollectionName));
   } catch (lcio::DataNotAvailableException& e ) {
diff --git a/processors/src/EUTelClusteringProcessor.cc b/processors/src/EUTelClusteringProcessor.cc
index f3cfecd..069ddce 100644
--- a/processors/src/EUTelClusteringProcessor.cc
+++ b/processors/src/EUTelClusteringProcessor.cc
@@ -67,6 +67,7 @@ using namespace marlin;
 using namespace eutelescope;
 
 static const int  MAXCLUSTERSIZE = 4096;
+int akosexample=0;
 
 
 EUTelClusteringProcessor::EUTelClusteringProcessor ()
@@ -213,6 +214,8 @@ EUTelClusteringProcessor::EUTelClusteringProcessor ()
 
     registerProcessorParameter("SparseMinDistanceSquared","Minimum distance squared between sparsified pixel ( touching == 2) ",
                                _sparseMinDistanceSquared, static_cast<int>(2) );
+	//_sparseMinDistanceSquared=4;
+    cout<<"_sparseMinDistanceSquared: "<<_sparseMinDistanceSquared<<endl;
 
     registerProcessorParameter("SparseMinDistance","Minimum distance between sparsified pixel ( touching == sqrt(2)) ",
                                _sparseMinDistance, static_cast<float > (0.0 ) );
@@ -2029,6 +2032,11 @@ void EUTelClusteringProcessor::sparseClustering(LCEvent* evt, LCCollectionVec* p
                         dY = y1 - y2;
                         int distance = dX*dX+dY*dY;
                         //if they pass the spatial and temporal cuts, we add them
+			if(akosexample==0)
+			{
+			cout<<"_sparseMinDistanceSquared(in real): "<<_sparseMinDistanceSquared<<endl;
+			akosexample++;
+			}
                         if( distance <= _sparseMinDistanceSquared )
                         {
                             //add them to the cluster as well as to the newly added ones
@@ -3370,6 +3378,7 @@ void EUTelClusteringProcessor::bookHistos() {
         _hitMapHistos.insert(make_pair(sensorID, hitMapHisto));
         hitMapHisto->setTitle("Hit map");
 
+
         tempHistoName = _eventMultiplicityHistoName + "_d" + to_string( sensorID );
         int     eventMultiNBin  = 60;
         double  eventMultiMin   =  0.;
diff --git a/processors/src/EUTelProcessorClusterAnalysis.cc b/processors/src/EUTelProcessorClusterAnalysis.cc
index 0b37868..d8aae37 100644
--- a/processors/src/EUTelProcessorClusterAnalysis.cc
+++ b/processors/src/EUTelProcessorClusterAnalysis.cc
@@ -58,7 +58,9 @@ EUTelProcessorClusterAnalysis::EUTelProcessorClusterAnalysis()
   _hotPixelCollectionName(""),
   _nLayer(0),
   _xPixel(),
-  _yPixel()
+  _yPixel(),
+  _chipVersion(4),
+  _sparseMinDistanceSquaredComparison(1)
 
   {
     _description="Analysing cluster properties such as cluster shape and average cluster size.";
@@ -97,15 +99,27 @@ EUTelProcessorClusterAnalysis::EUTelProcessorClusterAnalysis()
                              _irradiation, _stringVecExample );
     registerOptionalParameter("Rate","Data taking rate",
                              _rate, static_cast< string > ( "" ) );
+  registerOptionalParameter("ChipVersion", "Chip Version",
+                            _chipVersion, static_cast<int>(4) );
     _isFirstEvent = true;
   }
 
 void EUTelProcessorClusterAnalysis::init() {
   _nLayer = geo::gGeometry().nPlanes();
   const std::vector<int>& _planeID = geo::gGeometry().sensorIDsVec();
+cout<<"Here I am."<<endl;
+
+cout<<_dutID<<endl;
   for(int iz=0; iz < _nLayer ; iz++)
 	  if(_planeID[iz]==_dutID)
 		  _layerIndex = iz;
+  if (_chipVersion < 3)     _nSectors = 4;
+  else if (_chipVersion==3) _nSectors = 8;
+  else if (_chipVersion==5) _nSectors = 4;
+  else                      _nSectors = 1;
+cout<<"Here I am."<<endl;
+cout<<_chipVersion<<endl;
+cout<<_nSectors<<endl;
  
   //beware, sometimes dutID is 3, sometimes it is 6
   int iLayer = _dutID;
@@ -320,6 +334,138 @@ void EUTelProcessorClusterAnalysis::processEvent(LCEvent *evt)
 					pix.push_back(Y[iPixel]);
 					pixVector.push_back(pix);
 				}
+
+				//This part is to analysis the effect of the distance square between the pixels in one cluste
+				if(true)
+				{		
+					bool samecluster(true);
+					int howmanyclustergeneratedfromonecluster(0);
+					int AllGeneratedPixel(0);
+					int AllMissingPixel(0);
+
+					//Cluster mycluster;
+			
+           				std::vector<EUTelGenericSparsePixel> hitPixelVec = sparseData.getPixels();
+
+				        std::vector<EUTelGenericSparsePixel> newlyAdded;
+
+					int firsthclustersize=hitPixelVec.size();
+			 	        //We now cluster those hits together
+            				while( !hitPixelVec.empty() )
+            				{
+
+	
+                				std::vector<EUTelGenericSparsePixel> cluCandidate;
+
+                				//First we need to take any pixel, so let's take the first one
+                				//Add it to the cluster as well as the newly added pixels
+                				newlyAdded.push_back( hitPixelVec.front() );
+                				//sparseCluster->push_back( &(hitPixelVec.front()) );
+                				cluCandidate.push_back( hitPixelVec.front() );
+                				//And remove it from the original collection
+                				hitPixelVec.erase( hitPixelVec.begin() );
+
+                				//Now process all newly added pixels, initially this is the just previously added one
+                				//but in the process of neighbour finding we continue to add new pixels
+                				while( !newlyAdded.empty() )
+                				{
+                    					bool newlyDone = true;
+                    					int  x1, x2, y1, y2, dX, dY;
+
+                    					//check against all pixels in the hitPixelVec
+                    					for( std::vector<EUTelGenericSparsePixel>::iterator hitVec = hitPixelVec.begin(); hitVec != hitPixelVec.end(); ++hitVec )
+                    					{
+      		                  				//get the relevant infos from the newly added pixel
+                	        				x1 = newlyAdded.front().getXCoord();
+                	        				y1 = newlyAdded.front().getYCoord();
+	
+                	        				//and the pixel we test against
+                	        				x2 = hitVec->getXCoord();
+                	        				y2 = hitVec->getYCoord();
+	
+                	        				dX = x1 - x2;
+                	        				dY = y1 - y2;
+                	        				int distance = dX*dX+dY*dY;
+                	        				//if they pass the spatial and temporal cuts, we add them
+	
+                	        				if( distance <= _sparseMinDistanceSquaredComparison )
+                	        				{
+                		            				//add them to the cluster as well as to the newly added ones
+                		           				newlyAdded.push_back( *hitVec );
+                		            				cluCandidate.push_back( *hitVec );
+                		          				//	sparseCluster->push_back( &(*hitVec) );
+                		            				//and remove it from the original collection
+                		            				hitPixelVec.erase( hitVec );
+                		            				//for the pixel we test there might be other neighbours, we still have to check
+                		            				newlyDone = false;
+                		            				break;
+                		        			}
+                		    			}
+
+       						        //if no neighbours are found, we can delete the pixel from the newly added
+					                //we tested against _ALL_ non cluster pixels, there are no other pixels
+ 					                //which could be neighbours
+                					if(newlyDone) 
+							{
+								newlyAdded.erase( newlyAdded.begin() );
+							}
+             					}
+
+						if(firsthclustersize!=cluCandidate.size())
+						{
+							samecluster=false;
+							howmanyclustergeneratedfromonecluster++;
+							AllGeneratedPixel+=cluCandidate.size();
+							GeneratedClustersHisto->Fill(cluCandidate.size());
+							//cout<<"I filled GeneratedClustersHisto with: "<<cluCandidate.size()<<endl;
+						}
+						/*
+						vector<int> X(clusterSize);
+						vector<int> Y(clusterSize);
+
+  						int iforX=0;
+                				while(!cluCandidate.empty())
+                				{
+							X[iforX]=cluCandidate.fornt()..getXCoord();
+							Y[iforX]=cluCandidate.fornt()..getYCoord();
+                    					cluCandidate.erase( cluCandidate.begin() );
+							iforX++;
+                				}
+
+						mycluster.set_values(clusterSize,X,Y);
+						*/
+
+					}
+			
+
+					if(!samecluster)
+					{
+						MissingClusterHisto->Fill(firsthclustersize);
+						HowManyClusterGeneratedFromOneCluster->Fill(howmanyclustergeneratedfromonecluster);
+						howmanyclustergeneratedfromonecluster=0;
+						AllMissingPixel=firsthclustersize;
+						//cout<<"I filled MissingClusterHisto with: "<<firsthclustersize<<endl;
+					}
+
+					//cout<<"I have done the "<<idetector<<"th cluster"<<endl;
+
+					if(AllGeneratedPixel!=AllMissingPixel)
+					{
+						cout<<"ERROR: AllMissingPixel!=AllMissingPixel"<<endl;
+						cout<<"AllMissingPixel: "<<AllMissingPixel<<endl;
+						cout<<"AllGeneratedPixel: "<<AllGeneratedPixel<<endl;
+					}
+					AllMissingPixel=0;
+					AllGeneratedPixel=0;
+				}
+
+
+				//The end of the part folr distance analysis
+
+
+
+
+
 				streamlog_out ( DEBUG5 ) << "This is a DEBUG output to see whether the program gets here. The number X[0] is " << X[0] << " and _sectorWidth is " << _sectorWidth << endl; 
 				//now, since all pixels are from the same sector, the sector number can be set.
 				int index = X[0]/_sectorWidth;
@@ -390,11 +536,14 @@ void EUTelProcessorClusterAnalysis::bookHistos()
       AIDAProcessor::tree(this)->mkdir(Form("Sector_%d",iSector));
       AIDAProcessor::tree(this)->cd(Form("Sector_%d",iSector));
 
-      clusterWidthXHisto[iSector]  = new TH1I(Form("clusterWidthXHisto_%d",iSector),Form("Cluster width in X in sector %d;Cluster width X (pixel);a.u.",iSector),15,0.5,15.5);
-      clusterWidthYHisto[iSector]  = new TH1I(Form("clusterWidthYHisto_%d",iSector),Form("Cluster width in Y in sector %d;Cluster width Y (pixel);a.u.",iSector),15,0.5,15.5);
-      clusterSizeHisto[iSector]  = new TH1I(Form("clusterSizeHisto_%d",iSector),Form("Cluster size_%d;Cluster size (pixel);a.u.",iSector),20,0.5,20.5);
+      clusterWidthXHisto[iSector]  = new TH1I(Form("clusterWidthXHisto_%d",iSector),Form("Cluster width in X in sector %d;Cluster width X (pixel);a.u.",iSector),50,0.5,50.5);
+      clusterWidthYHisto[iSector]  = new TH1I(Form("clusterWidthYHisto_%d",iSector),Form("Cluster width in Y in sector %d;Cluster width Y (pixel);a.u.",iSector),50,0.5,50.5);
+      clusterSizeHisto[iSector]  = new TH1I(Form("clusterSizeHisto_%d",iSector),Form("Cluster size_%d;Cluster size (pixel);a.u.",iSector),200,0.5,200.5);
       clusterShapeHistoSector[iSector] = new TH1I(Form("clusterShapeHisto_%d",iSector),Form("Cluster shape (all rotations separately) Sector %d;Cluster shape ID;a.u.",iSector),clusterVec.size()+1,-0.5,clusterVec.size()+0.5);
       clusterShapeHistoGroupedSector[iSector] = new TH1I(Form("clusterShapeHistoGrouped_%d",iSector),Form("Cluster shape (all rotations treated together) Sector %d;Cluster shape ID;a.u.",iSector),symmetryGroups.size(),-0.5,symmetryGroups.size()-0.5);
+      GeneratedClustersHisto = new TH1I(Form("GeneratedClustersHisto"),Form("GeneratedClustersHisto;Cluster size (pixel);a.u."),200,0.5,200.5); 
+      MissingClusterHisto = new TH1I(Form("MissingClusterHisto"),Form("MissingClusterHisto;Cluster size (pixel);a.u."),200,0.5,200.5);
+      HowManyClusterGeneratedFromOneCluster = new TH1I(Form("HowManyClusterGeneratedFromOneCluster"),Form("HowManyClusterGeneratedFromOneCluster;Cluster size (pixel);a.u."),20,0.5,20.5);
     }
   streamlog_out ( DEBUG5 )  << "end of Booking histograms " << endl;
 }
